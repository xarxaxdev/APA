(table.poly4.test <- table(pred.poly4.test,smiley.low.test[,3]))
encerts.poly4.test <- sum(pred.poly4.test == smiley.low.test[,3]) #Num Encerts
(error_rate["poly4",2] <- 100*(1-(encerts.poly4.test)/nrow(smiley.low.test))) #% d'Error
plot(model.poly4,data = smiley.low.test)
#RBF test
pred.rbf.test <- predict(model.rbf, smiley.low.test[,1:2])
(table.rbf.test <- table(pred.rbf.test,smiley.low.test[,3]))
encerts.rbf.test <- sum(pred.rbf.test == smiley.low.test[,3]) #Num Encerts
(error_rate["RBF",2] <- 100*(1-(encerts.rbf.test)/nrow(smiley.low.test))) #% d'Error
plot(model.rbf,data = smiley.low.test)
library(randomForest)
model.rf1 <- randomForest(classes ~ ., data = smiley.moderate, ntree=100, proximity=FALSE)
model.rf1
## We get an estimated test error (OOB) of 9.3%, so better; let's compute the real test error:
pred.rf1 <- predict (model.rf1, smiley.moderate[,1:2], type="class")
table(pred.rf1,smiley.moderate[,3])
(encerts <- sum(pred.rf1 == smiley.moderate$classes)) #Num Errors
(error_rate.learn <- 100*(1-(encerts)/nrow(smiley.moderate))) #% d'Error
library(randomForest)
model.rf1 <- randomForest(classes ~ ., data = smiley.moderate, ntree=100, proximity=FALSE)
model.rf1
## We get an estimated test error (OOB) of 9.3%, so better; let's compute the real test error:
pred.rf1 <- predict (model.rf1, smiley.moderate[,1:2], type="class")
table(pred.rf1,smiley.moderate[,3])
(encerts <- sum(pred.rf1 == smiley.moderate$classes)) #Num Errors
(error_rate.learn <- 100*(1-(encerts)/nrow(smiley.moderate))) #% d'Error
?randomForest
values <- seq(1,2,1)
model.rf1 <- randomForest(classes ~ ., data = smiley.moderate, ntree=100, proximity=FALSE,
tuneGrid = expand.grid(mtry=values))
model.rf1
n.test <- 10000
## low date ##
smiley.low <- data.generator(n.train,0.05,0.05)
names(smiley.low)[1] <- "x1"
names(smiley.low)[2] <- "x2"
smiley.low.test <- data.generator(n.test,0.05,0.05)
names(smiley.low.test)[1] <- "x1"
names(smiley.low.test)[2] <- "x2"
smiley.moderate <- data.generator(n.train,0.5,0.5)
names(smiley.moderate)[1] <- "x1"
names(smiley.moderate)[2] <- "x2"
smiley.moderate.test <- data.generator(n.test,0.5,0.5)
names(smiley.moderate.test)[1] <- "x1"
names(smiley.moderate.test)[2] <- "x2"
a=0.05; b=0.05
p <- mlbench.smiley (n=n.train,sd1=a,sd2=b)
plot(p)
plot(p$x)
plot(p$classes)
p <- mlbench.smiley (n=n.train,sd1 =b)
plot(p)
p <- mlbench.smiley (n=n.train,sd1 = b,sd2 = b)
plot(p)
smiley.moderate <- data.generator(n.train,0.5,0.5)
smiley.moderate <- data.generator(n.train,0.5,0.5,0.5)
smiley.moderate <- data.generator(n.train,0.5,0.5,0.5)
names(smiley.moderate)[1] <- "x1"
smiley.moderate <- data.generator(n.train,0.5,0.5,a = 0.5)
names(smiley.moderate)[1] <- "x1"
names(smiley.moderate)[2] <- "x2"
rm(list=ls(all=TRUE))
library(rstudioapi) # load it
# the following line is for getting the path the open file
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path ))
pokemons <- read.csv("pokemon_procesado.csv",header=T, sep=",")
n <- nrow(pokemons)
learn <- sample(1:n, round(2*n/3))
nlearn <- length(learn)
ntest <- n - nlearn
pokemonsTraining <- pokemons[learn,]
pokemonsTesting <- pokemons[-learn,]
View(pokemonsTesting)
View(pokemonsTraining)
View(pokemonsTesting)
View(pokemonsTraining)
source('~/APA_practica/preprocessing.r', echo=TRUE)
abilities <- as.factor(paste(c(as.character(pokemons$ability_1),
as.character(pokemons$ability_2),
as.character(pokemons$ability_hidden))))
c <- as.data.frame(table(abilities))
(c2 <- c[order(-c$Freq),])
plot(c2[c2$abilities != 'NA' ,])
ind <- c[c$Freq < 20 ,] # top 25
levels(pokemons$ability_1) <- c(levels(pokemons$ability_1),'LOWFREQ')
levels(pokemons$ability_2) <- c(levels(pokemons$ability_2),'LOWFREQ')
levels(pokemons$ability_hidden) <- c(levels(pokemons$ability_hidden),'LOWFREQ')
for (i in ind$abilities) {
pokemons$ability_1[pokemons$ability_1 == i] <- "LOWFREQ"
pokemons$ability_2[pokemons$ability_2 == i] <- "LOWFREQ"
pokemons$ability_hidden[pokemons$ability_hidden == i] <- "LOWFREQ"
}
abilities <- as.factor(paste(c(as.character(pokemons$ability_1),
as.character(pokemons$ability_2),
as.character(pokemons$ability_hidden))))
length(levels(abilities))
c <- as.data.frame(table(abilities))
c<- c[c$abilities != 'NA',] #we dont want to add NAs
c$abilities <- factor(c$abilities)
(c2 <- c[order(-c$Freq),])
plot(c2, xaxt="n", ann=FALSE)
text(seq(c$abilities), labels = c$abilities, srt =50, pos = 1, offset = 2.5,xpd = TRUE,cex=.75)
#get all abilities
(abilities <-levels(abilities))
#change to boolean so they count properly
for (i in abilities){
index <-  paste('ability', i,sep = '_')
pokemons[,index] <-( (pokemons$ability_1==i )| (!is.na( pokemons$ability_2) & pokemons$ability_2==i)|
(!is.na( pokemons$ability_hidden) & pokemons$ability_hidden==i))
}
pokemons$ability_1 <- NULL
pokemons$ability_2 <- NULL
pokemons$ability_hidden <- NULL
pokemons$ability_NA <- NULL #we don't need this anymore
pokemons
#pokemonSinForma <- pokemons[rowSums(is.na(pokemons)) > 0,]#per comprovar
pokemons <- pokemons[complete.cases(pokemons),]
pokemons[pokemons == FALSE] <- 0
pokemons[pokemons == TRUE] <- 1
pokemons$pokemon <- NULL
#Now we want to transform data for reduce the skewness and kurtosis
#We use the following functions for calculate the skewness and kurtosis of every predictor variable
#Acceptables values are round 0 in both skewness and kurtosis.
#For achieve this values we use 2 methods, the log transformormation and the sqrt transformation.
skewness(pokemons$height)  #bad results
kurtosis(pokemons$height)
hist(pokemons$height)      #it doesn't have gaussian form or similar
skewness(log(pokemons$height))
kurtosis(log(pokemons$height))
hist(log(pokemons$height))
pokemons$height <- log(pokemons$height)
#weight
skewness(pokemons$weight)
kurtosis(pokemons$weight)
hist(pokemons$weight)
skewness(log(pokemons$weight))
kurtosis(log(pokemons$weight))
hist(log(pokemons$weight))
pokemons$weight <- log(pokemons$weight)
#base_experience
skewness(pokemons$base_experience)
kurtosis(pokemons$base_experience)
hist(pokemons$base_experience)
skewness(log(pokemons$base_experience))
kurtosis(log(pokemons$base_experience))
hist(log(pokemons$base_experience))
pokemons$base_experience <- log(pokemons$base_experience)
#attack
skewness(pokemons$attack)
kurtosis(pokemons$attack)
hist(pokemons$attack)
skewness(sqrt(pokemons$attack))
kurtosis(sqrt(pokemons$attack))
hist(sqrt(pokemons$attack))
pokemons$attack <- sqrt(pokemons$attack)
#defense
skewness(pokemons$defense)
kurtosis(pokemons$defense)
hist(pokemons$defense)
skewness(sqrt(pokemons$defense))
kurtosis(sqrt(pokemons$defense))
hist(sqrt(pokemons$defense))
pokemons$defense <- sqrt(pokemons$defense)
#hp
skewness(pokemons$hp)
kurtosis(pokemons$hp)
hist(pokemons$hp)
skewness(sqrt(pokemons$hp))
kurtosis(sqrt(pokemons$hp))
hist(sqrt(pokemons$hp))
pokemons$hp <- sqrt(pokemons$hp)
#special_attack
skewness(pokemons$special_attack)
kurtosis(pokemons$special_attack)
hist(pokemons$special_attack)
skewness(sqrt(pokemons$special_attack))
kurtosis(sqrt(pokemons$special_attack))
hist(sqrt(pokemons$special_attack))
pokemons$special_attack <- sqrt(pokemons$special_attack)
#special_defense
skewness(pokemons$special_defense)
kurtosis(pokemons$special_defense)
hist(pokemons$special_defense)
skewness(sqrt(pokemons$special_defense))
kurtosis(sqrt(pokemons$special_defense))
hist(sqrt(pokemons$special_defense))
pokemons$special_defense <- sqrt(pokemons$special_defense)
p <- ggplot(pokemons,aes(x=height)) +
geom_density() +
geom_vline(aes(xintercept=mean(height)),
color="blue", linetype="dashed", size=1)
p
p <- ggplot(pokemons,aes(x=weight)) +
geom_density() +
geom_vline(aes(xintercept=mean(weight)),
color="blue", linetype="dashed", size=1)
p
####################################################
################## NUMERICAL VARIABLES ######################
##################NEEDING NORMALIZATION ######################
####################################################
max(pokemons$height)
pokemons$height <- pokemons$height/max(pokemons$height)
max(pokemons$weight)
pokemons$weight <- pokemons$weight/max(pokemons$weight)
max(pokemons$base_experience)
pokemons$base_experience <- pokemons$base_experience/max(pokemons$base_experience)
max(pokemons$attack)
pokemons$attack <- pokemons$attack/max(pokemons$attack)
max(pokemons$defense)
max(pokemons$hp)
pokemons$hp <- pokemons$hp/max(pokemons$hp)
pokemons$defense <- pokemons$defense/max(pokemons$defense)
max(pokemons$special_attack)
pokemons$special_attack <- pokemons$special_attack/max(pokemons$special_attack)
max(pokemons$special_defense)
pokemons$special_defense <- pokemons$special_defense/max(pokemons$special_defense)
max(pokemons$speed)
pokemons$speed <- pokemons$speed/max(pokemons$speed)
write.table(pokemons, file = "pokemon_procesado.csv", sep = ",", na = "NA", dec = ".", row.names = FALSE, col.names = TRUE)
rm(list=ls(all=TRUE))
library(rstudioapi) # load it
# the following line is for getting the path the open file
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path ))
pokemons <- read.csv("pokemon_procesado.csv",header=T, sep=",")
n <- nrow(pokemons)
learn <- sample(1:n, round(2*n/3))
nlearn <- length(learn)
ntest <- n - nlearn
pokemonsTraining <- pokemons[learn,]
pokemonsTesting <- pokemons[-learn,]
write.table(pokemonsTraining, file = "pokemonsTraining.csv", sep = ",", na = "NA", dec = ".", row.names = FALSE, col.names = TRUE)
write.table(pokemonsTesting, file = "pokemonsTesting.csv", sep = ",", na = "NA", dec = ".", row.names = FALSE, col.names = TRUE)
View(pokemons)
rm(list=ls(all=TRUE))
library(rstudioapi) # load it
# the following line is for getting the path the open file
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path ))
library(keras)
library(dplyr)
#divide in testing and training
pokemonsTraining <- read.csv("pokemonTraining.csv",header=T, sep=",")
pokemonsTesting <- read.csv("pokemonsTesting.csv",header=T, sep=",")
#numero neuronas
#5 por cada stat que no es speed
#3 experiencia base, height, weight
#2 por type
#2 por eggtype
#3 por abilities
#1 por la shape
nNeuronas <- 17
rm(list=ls(all=TRUE))
library(rstudioapi) # load it
# the following line is for getting the path the open file
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path ))
library(keras)
library(dplyr)
#divide in testing and training
pokemonsTraining <- read.csv("pokemonTraining.csv",header=T, sep=",")
pokemonsTesting <- read.csv("pokemonsTesting.csv",header=T, sep=",")
#numero neuronas
#5 por cada stat que no es speed
#3 experiencia base, height, weight
#2 por type
#2 por eggtype
#3 por abilities
#1 por la shape
nNeuronas <- 17
model <- keras_model_sequential()
model%>%
layer_dense(input_shape = c(ncol(pokemonsTraining)-1), nNeuronas )%>%
layer_dense(units = nNeuronas )%>%
layer_dense(units = nNeuronas )%>%
layer_dense(units = nNeuronas )%>%
layer_dense(units = nNeuronas )%>%
layer_dense(input_shape = 1, units = 1 )
model %>% compile(
loss = 'mean_squared_error',
optimizer = optimizer_sgd(),
metrics = c('mse')
)
model
y_train <- pokemonsTraining$speed
x_train <- as.matrix(pokemonsTraining[,- which(names(pokemonsTraining)== 'speed')])
history <- model %>% fit(
x_train, y_train,
epochs = 30, batch_size = 128,
validation_split = 0.2
)
#numero neuronas
#5 por cada stat que no es speed
#3 experiencia base, height, weight
#2 por type
#2 por eggtype
#3 por abilities
#1 por la shape
nNeuronas <- 19
model <- keras_model_sequential()
model%>%
layer_dense(input_shape = c(ncol(pokemonsTraining)-1), nNeuronas )%>%
layer_dense(units = nNeuronas )%>%
layer_dense(units = nNeuronas )%>%
layer_dense(units = nNeuronas )%>%
layer_dense(units = nNeuronas )%>%
layer_dense(input_shape = 1, units = 1 )
model %>% compile(
loss = 'mean_squared_error',
optimizer = optimizer_sgd(),
metrics = c('mse')
)
model
y_train <- pokemonsTraining$speed
x_train <- as.matrix(pokemonsTraining[,- which(names(pokemonsTraining)== 'speed')])
history <- model %>% fit(
x_train, y_train,
epochs = 30, batch_size = 128,
validation_split = 0.2
)
#numero neuronas
#5 por cada stat que no es speed
#3 experiencia base, height, weight
#2 por type
#2 por eggtype
#3 por abilities
#1 por la shape
nNeuronas <- 18
model <- keras_model_sequential()
model%>%
layer_dense(input_shape = c(ncol(pokemonsTraining)-1), nNeuronas )%>%
layer_dense(units = nNeuronas )%>%
layer_dense(units = nNeuronas )%>%
layer_dense(units = nNeuronas )%>%
layer_dense(units = nNeuronas )%>%
layer_dense(input_shape = 1, units = 1 )
model %>% compile(
loss = 'mean_squared_error',
optimizer = optimizer_sgd(),
metrics = c('mse')
)
model
y_train <- pokemonsTraining$speed
x_train <- as.matrix(pokemonsTraining[,- which(names(pokemonsTraining)== 'speed')])
history <- model %>% fit(
x_train, y_train,
epochs = 30, batch_size = 128,
validation_split = 0.2
)
y_test <- pokemonsTesting$speed
x_test <- as.matrix(pokemonsTesting[,- which(names(pokemonsTesting)== 'speed')])
model %>% evaluate(x_test, y_test)
rm(list=ls(all=TRUE))
library(rstudioapi) # load it
# the following line is for getting the path the open file
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path ))
library(keras)
library(dplyr)
#divide in testing and training
pokemonsTraining <- read.csv("pokemonTraining.csv",header=T, sep=",")
pokemonsTesting <- read.csv("pokemonsTesting.csv",header=T, sep=",")
#numero neuronas
#5 por cada stat que no es speed
#3 experiencia base, height, weight
#2 por type
#2 por eggtype
#3 por abilities
#1 por la shape
nNeuronas <- 17
model <- keras_model_sequential()
model%>%
layer_dense(input_shape = c(ncol(pokemonsTraining)-1), nNeuronas )%>%
layer_dense(units = nNeuronas )%>%
layer_dense(units = nNeuronas )%>%
layer_dense(units = nNeuronas )%>%
layer_dense(units = nNeuronas )%>%
layer_dense(input_shape = 1, units = 1 )
model %>% compile(
loss = 'mean_squared_error',
optimizer = optimizer_sgd(),
metrics = c('mse')
)
model
y_train <- pokemonsTraining$speed
x_train <- as.matrix(pokemonsTraining[,- which(names(pokemonsTraining)== 'speed')])
history <- model %>% fit(
x_train, y_train,
epochs = 30, batch_size = 128,
validation_split = 0.2
)
y_test <- pokemonsTesting$speed
x_test <- as.matrix(pokemonsTesting[,- which(names(pokemonsTesting)== 'speed')])
model %>% evaluate(x_test, y_test)
#divide in testing and training
pokemonsTraining <- read.csv("pokemonTraining.csv",header=T, sep=",")
pokemonsTesting <- read.csv("pokemonsTesting.csv",header=T, sep=",")
#numero neuronas
#5 por cada stat que no es speed
#3 experiencia base, height, weight
#2 por type
#2 por eggtype
#3 por abilities
#1 por la shape
nNeuronas <- 16
model <- keras_model_sequential()
model%>%
layer_dense(input_shape = c(ncol(pokemonsTraining)-1), nNeuronas )%>%
layer_dense(units = nNeuronas )%>%
layer_dense(units = nNeuronas )%>%
layer_dense(units = nNeuronas )%>%
layer_dense(units = nNeuronas )%>%
layer_dense(input_shape = 1, units = 1 )
model %>% compile(
loss = 'mean_squared_error',
optimizer = optimizer_sgd(),
metrics = c('mse')
)
model
y_train <- pokemonsTraining$speed
x_train <- as.matrix(pokemonsTraining[,- which(names(pokemonsTraining)== 'speed')])
history <- model %>% fit(
x_train, y_train,
epochs = 30, batch_size = 128,
validation_split = 0.2
)
source('~/APA_practica/MLP.r', echo=TRUE)
source('~/APA_practica/MLP.r', echo=TRUE)
source('~/APA_practica/MLP.r', echo=TRUE)
source('~/APA_practica/MLP.r', echo=TRUE)
source('~/APA_practica/MLP.r', echo=TRUE)
y_test <- pokemonsTesting$speed
x_test <- as.matrix(pokemonsTesting[,- which(names(pokemonsTesting)== 'speed')])
model %>% evaluate(x_test, y_test)
model %>% evaluate(x_test, y_test)
source('~/APA_practica/MLP.r', echo=TRUE)
rm(list=ls(all=TRUE))
library(rstudioapi) # load it
# the following line is for getting the path the open file
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path ))
pokemons <- read.csv("pokemon_procesado.csv",header=T, sep=",")
n <- nrow(pokemons)
learn <- sample(1:n, round(2*n/3))
nlearn <- length(learn)
ntest <- n - nlearn
pokemonsTraining <- pokemons[learn,]
pokemonsTesting <- pokemons[-learn,]
write.table(pokemonsTraining, file = "pokemonsTraining.csv", sep = ",", na = "NA", dec = ".", row.names = FALSE, col.names = TRUE)
write.table(pokemonsTesting, file = "pokemonsTesting.csv", sep = ",", na = "NA", dec = ".", row.names = FALSE, col.names = TRUE)
rm(list=ls(all=TRUE))
library(rstudioapi) # load it
# the following line is for getting the path the open file
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path ))
library(keras)
library(dplyr)
#divide in testing and training
pokemonsTraining <- read.csv("pokemonTraining.csv",header=T, sep=",")
pokemonsTesting <- read.csv("pokemonsTesting.csv",header=T, sep=",")
rm(list=ls(all=TRUE))
library(rstudioapi) # load it
# the following line is for getting the path the open file
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path ))
pokemons <- read.csv("pokemon_procesado.csv",header=T, sep=",")
n <- nrow(pokemons)
learn <- sample(1:n, round(2*n/3))
nlearn <- length(learn)
ntest <- n - nlearn
pokemonsTraining <- pokemons[learn,]
pokemonsTesting <- pokemons[-learn,]
write.table(pokemonsTraining, file = "pokemonsTraining.csv", sep = ",", na = "NA", dec = ".", row.names = FALSE, col.names = TRUE)
write.table(pokemonsTesting, file = "pokemonsTesting.csv", sep = ",", na = "NA", dec = ".", row.names = FALSE, col.names = TRUE)
rm(list=ls(all=TRUE))
library(rstudioapi) # load it
# the following line is for getting the path the open file
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path ))
library(keras)
library(dplyr)
#divide in testing and training
pokemonsTraining <- read.csv("pokemonTraining.csv",header=T, sep=",",dec = '.')
pokemonsTesting <- read.csv("pokemonsTesting.csv",header=T, sep=",",dec = '.')
View(pokemonsTraining)
source('~/APA_practica/preprocessing.r', echo=TRUE)
rm(list=ls(all=TRUE))
library(rstudioapi) # load it
# the following line is for getting the path the open file
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path ))
library(keras)
library(dplyr)
#divide in testing and training
pokemonsTraining <- read.csv("pokemonTraining.csv",header=T, sep=",",dec = '.', na = "NA")
pokemonsTesting <- read.csv("pokemonsTesting.csv",header=T, sep=",",dec = '.', na = "NA")
source('~/APA_practica/MLP.r', echo=TRUE)
rm(list=ls(all=TRUE))
library(rstudioapi) # load it
# the following line is for getting the path the open file
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path ))
library(keras)
library(dplyr)
#divide in testing and training
pokemonsTraining <- read.csv("pokemonTraining.csv", sep = ",", na = "NA", dec = ".", row.names = FALSE, col.names = TRUE)
#divide in testing and training
pokemonsTraining <- read.csv("pokemonTraining.csv", sep = ",", na = "NA", dec = ".")
pokemonsTesting <- read.csv("pokemonsTesting.csv", sep = ",", na = "NA", dec = ".")
View(pokemonsTraining)
